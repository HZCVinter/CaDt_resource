
# 矩阵加减法

# 加法
def add_matrix(ma,mb,output=False):
    ran_list=min(len(ma[0]),len(mb[0]))
    cow_list=min(len(ma),len(mb))
    mar_rank=[ran_list*[0]]*cow_list
    result=[]
    for i in range(len(mar_rank)):
        cow_only=[]
        for ii in range(len(mar_rank[0])):
            cow_only.append(ma[i][ii]+mb[i][ii])
        result.append(cow_only)
    if output:
        str_r = []
        for i in result:
            str_r.append(str(i))
        return "\n".join(str_r)
    return result

print("加法：")
print(add_matrix([[2,5,6,7],[9,8,5,0]],[[3,6,0,9],[3,8,7,7]],output=True))
print()

def remove_matrix(ma,mb,output=False):
    ran_list=min(len(ma[0]),len(mb[0]))
    cow_list=min(len(ma),len(mb))
    mar_rank=[ran_list*[0]]*cow_list
    result=[]
    for i in range(len(mar_rank)):
        cow_only=[]
        for ii in range(len(mar_rank[0])):
            cow_only.append(ma[i][ii]-mb[i][ii])
        result.append(cow_only)
    if output:
        str_r = []
        for i in result:
            str_r.append(str(i))
        return "\n".join(str_r)
    return result

print("减法")
print(remove_matrix([[2,5,6,7],[9,8,5,0]],[[3,6,0,9],[3,8,7,7]],output=True))
print()



def multipy_matrix(ma,mb,output=False):
    ran_list=len(mb[0])
    cow_list=len(ma)
    mar_rank=[]
    for i in range(cow_list):
        a=[]
        for ii in range(ran_list):
            a.append(ii)
        mar_rank.append(a)
    for m in range(len(mar_rank)):
        for n in range(len(mar_rank[0])):
            if len(ma[m]) != len(mb) :
                return None
            else:
                r_mn=0
                for i in range(len(ma[m])):
                    r_mn+=(ma[m][i] * mb[i][n])
                mar_rank[m][n]=r_mn
    if output:
        str_r = []
        for i in mar_rank:
            str_r.append(str(i))
        return "\n".join(str_r)
    return mar_rank



print("乘法：")
print(multipy_matrix([[2,5,6,7],[9,8,5,0]],[[3,6],[3,8],[0,9],[7,7]],output=True))
print()


def num_matrix(number,mat):
    for m in range(len(mat)):
        for n in range(len(mat[0])):
            mat[m][n]*=number
    return mat

print("数乘：")
print(num_matrix(7,[[3,6,0,9],[3,8,7,7]]))
print()


def power_matrix(power,mat,i=1):
    if type(power) != int:
        return "error:请输入正整数"
    else:
        if i==1:
            return multipy_matrix(mat,power_matrix(power,mat,i+1))
        if i==power:
            return mat

print("指乘：")
print(power_matrix(2,[[3, 6], [3, 8]]))
print()


        # 复杂运算(无括号)
def complex_matrix(cal_for,**m):
    alaph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    add_list=[]
    remove_list=[]
    other=[]
    '''    import re
    spllist=re.split(r"\+",cal_for)
    for i in spllist:
        if "-" not in i:
            add_list.append(i)
        else:
            other.append(i)'''

    for i in range(len(cal_for)):
        if i==0 and cal_for[0]!="-":
            lens=0
            alnum=0
            for ii in range(len(cal_for)):
                if cal_for[ii] not in alaph:
                    lens+=1
                elif cal_for[ii] in alaph and alnum==0:
                    alnum+=1
                else:
                    break
                if cal_for[ii]=="*" and cal_for[ii-1] in alaph and cal_for[ii+1] in alaph:
                    alnum-=1
                    lens+=1
        else:
            if cal_for[i]=="+":
                pass

            if cal_for[i]=="-":
                pass




                add_list.append(cal_for[0:lens])


    print(add_list,other)
    # 太难了


print(complex_matrix("3*A*B*C*D+B-C-D+3*C-6*A",A=1,B=2))










